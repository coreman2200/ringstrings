// Code generated by Wire protocol buffer compiler, do not edit.
// Source: Placement in ringstrings.proto
package com.coreman2200.ringstrings.`data`.protos

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import okio.ByteString
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.jvm.JvmField

/**
 * Geographical, temporal placement for profile
 */
public class Placement(
    @field:WireField(  
        tag = 1,  
        adapter = "Placement${'$'}Location#ADAPTER",
        label = WireField.Label.OMIT_IDENTITY  
    )  
    public val geo: Location? = null,
    @field:WireField(  
        tag = 2,  
        adapter = "com.squareup.wire.ProtoAdapter#INT64",  
        label = WireField.Label.OMIT_IDENTITY  
    )  
    public val timestamp: Long = 0L,
    @field:WireField(  
        tag = 3,  
        adapter = "com.squareup.wire.ProtoAdapter#STRING",  
        label = WireField.Label.OMIT_IDENTITY  
    )  
    public val timezone: String = "",
    unknownFields: ByteString = ByteString.EMPTY
) : AndroidMessage<Placement, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
        message = "Shouldn't be used in Kotlin",
        level = DeprecationLevel.HIDDEN
    )
    public override fun newBuilder(): Nothing = throw
    AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    public override fun equals(other: Any?): Boolean {
        if (other === this) return true
        if (other !is Placement) return false
        if (unknownFields != other.unknownFields) return false
        if (geo != other.geo) return false
        if (timestamp != other.timestamp) return false
        if (timezone != other.timezone) return false
        return true
    }

    public override fun hashCode(): Int {
        var result = super.hashCode
        if (result == 0) {
            result = unknownFields.hashCode()
            result = result * 37 + (geo?.hashCode() ?: 0)
            result = result * 37 + timestamp.hashCode()
            result = result * 37 + timezone.hashCode()
            super.hashCode = result
        }
        return result
    }

    public override fun toString(): String {
        val result = mutableListOf<String>()
        if (geo != null) result += """geo=$geo"""
        result += """timestamp=$timestamp"""
        result += """timezone=${sanitize(timezone)}"""
        return result.joinToString(prefix = "Placement{", separator = ", ", postfix = "}")
    }

    public fun copy(
        geo: Location? = this.geo,
        timestamp: Long = this.timestamp,
        timezone: String = this.timezone,
        unknownFields: ByteString = this.unknownFields
    ): Placement = Placement(geo, timestamp, timezone, unknownFields)

    public companion object {
        @JvmField
        public val ADAPTER: ProtoAdapter<Placement> = object : ProtoAdapter<Placement>(
            FieldEncoding.LENGTH_DELIMITED,
            Placement::class,
            "type.googleapis.com/Placement",
            PROTO_3,
            null,
            "ringstrings.proto"
        ) {
            public override fun encodedSize(`value`: Placement): Int {
                var size = value.unknownFields.size
                if (value.geo != null) size += Location.ADAPTER.encodedSizeWithTag(1, value.geo)
                if (value.timestamp != 0L) size += ProtoAdapter.INT64.encodedSizeWithTag(2, value.timestamp)
                if (value.timezone != "") size += ProtoAdapter.STRING.encodedSizeWithTag(3, value.timezone)
                return size
            }

            public override fun encode(writer: ProtoWriter, `value`: Placement) {
                if (value.geo != null) Location.ADAPTER.encodeWithTag(writer, 1, value.geo)
                if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.timestamp)
                if (value.timezone != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.timezone)
                writer.writeBytes(value.unknownFields)
            }

            public override fun encode(writer: ReverseProtoWriter, `value`: Placement) {
                writer.writeBytes(value.unknownFields)
                if (value.timezone != "") ProtoAdapter.STRING.encodeWithTag(writer, 3, value.timezone)
                if (value.timestamp != 0L) ProtoAdapter.INT64.encodeWithTag(writer, 2, value.timestamp)
                if (value.geo != null) Location.ADAPTER.encodeWithTag(writer, 1, value.geo)
            }

            public override fun decode(reader: ProtoReader): Placement {
                var geo: Location? = null
                var timestamp: Long = 0L
                var timezone: String = ""
                val unknownFields = reader.forEachTag { tag ->
                    when (tag) {
                        1 -> geo = Location.ADAPTER.decode(reader)
                        2 -> timestamp = ProtoAdapter.INT64.decode(reader)
                        3 -> timezone = ProtoAdapter.STRING.decode(reader)
                        else -> reader.readUnknownField(tag)
                    }
                }
                return Placement(
                    geo = geo,
                    timestamp = timestamp,
                    timezone = timezone,
                    unknownFields = unknownFields
                )
            }

            public override fun redact(`value`: Placement): Placement = value.copy(
                geo = value.geo?.let(Location.ADAPTER::redact),
                unknownFields = ByteString.EMPTY
            )
        }

        @JvmField
        public val CREATOR: Parcelable.Creator<Placement> = AndroidMessage.newCreator(ADAPTER)

        private const val serialVersionUID: Long = 0L
    }

    public class Location(
        @field:WireField(  
            tag = 1,  
            adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",  
            label = WireField.Label.OMIT_IDENTITY  
        )  
        public val longitude: Double = 0.0,
        @field:WireField(  
            tag = 2,  
            adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",  
            label = WireField.Label.OMIT_IDENTITY  
        )  
        public val latitude: Double = 0.0,
        @field:WireField(  
            tag = 3,  
            adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",  
            label = WireField.Label.OMIT_IDENTITY  
        )  
        public val altitude: Double = 0.0,
        unknownFields: ByteString = ByteString.EMPTY
    ) : AndroidMessage<Location, Nothing>(ADAPTER, unknownFields) {
        @Deprecated(
            message = "Shouldn't be used in Kotlin",
            level = DeprecationLevel.HIDDEN
        )
        public override fun newBuilder(): Nothing = throw
        AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

        public override fun equals(other: Any?): Boolean {
            if (other === this) return true
            if (other !is Location) return false
            if (unknownFields != other.unknownFields) return false
            if (longitude != other.longitude) return false
            if (latitude != other.latitude) return false
            if (altitude != other.altitude) return false
            return true
        }

        public override fun hashCode(): Int {
            var result = super.hashCode
            if (result == 0) {
                result = unknownFields.hashCode()
                result = result * 37 + longitude.hashCode()
                result = result * 37 + latitude.hashCode()
                result = result * 37 + altitude.hashCode()
                super.hashCode = result
            }
            return result
        }

        public override fun toString(): String {
            val result = mutableListOf<String>()
            result += """longitude=$longitude"""
            result += """latitude=$latitude"""
            result += """altitude=$altitude"""
            return result.joinToString(prefix = "Location{", separator = ", ", postfix = "}")
        }

        public fun copy(
            longitude: Double = this.longitude,
            latitude: Double = this.latitude,
            altitude: Double = this.altitude,
            unknownFields: ByteString = this.unknownFields
        ): Location = Location(longitude, latitude, altitude, unknownFields)

        public companion object {
            @JvmField
            public val ADAPTER: ProtoAdapter<Location> = object : ProtoAdapter<Location>(
                FieldEncoding.LENGTH_DELIMITED,
                Location::class,
                "type.googleapis.com/Placement.Location",
                PROTO_3,
                null,
                "ringstrings.proto"
            ) {
                public override fun encodedSize(`value`: Location): Int {
                    var size = value.unknownFields.size
                    if (value.longitude != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(
                        1,
                        value.longitude
                    )
                    if (value.latitude != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(
                        2,
                        value.latitude
                    )
                    if (value.altitude != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(
                        3,
                        value.altitude
                    )
                    return size
                }

                public override fun encode(writer: ProtoWriter, `value`: Location) {
                    if (value.longitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.longitude)
                    if (value.latitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.latitude)
                    if (value.altitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.altitude)
                    writer.writeBytes(value.unknownFields)
                }

                public override fun encode(writer: ReverseProtoWriter, `value`: Location) {
                    writer.writeBytes(value.unknownFields)
                    if (value.altitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 3, value.altitude)
                    if (value.latitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 2, value.latitude)
                    if (value.longitude != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.longitude)
                }

                public override fun decode(reader: ProtoReader): Location {
                    var longitude: Double = 0.0
                    var latitude: Double = 0.0
                    var altitude: Double = 0.0
                    val unknownFields = reader.forEachTag { tag ->
                        when (tag) {
                            1 -> longitude = ProtoAdapter.DOUBLE.decode(reader)
                            2 -> latitude = ProtoAdapter.DOUBLE.decode(reader)
                            3 -> altitude = ProtoAdapter.DOUBLE.decode(reader)
                            else -> reader.readUnknownField(tag)
                        }
                    }
                    return Location(
                        longitude = longitude,
                        latitude = latitude,
                        altitude = altitude,
                        unknownFields = unknownFields
                    )
                }

                public override fun redact(`value`: Location): Location = value.copy(
                    unknownFields = ByteString.EMPTY
                )
            }

            @JvmField
            public val CREATOR: Parcelable.Creator<Location> = AndroidMessage.newCreator(ADAPTER)

            private const val serialVersionUID: Long = 0L
        }
    }
}
