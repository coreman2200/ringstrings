// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: ringstrings.proto at 84:1
package com.coreman2200.domain.model.protos;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

/**
 * Symbol description model for each of the presented symbols in app.
 */
public final class SymbolDescription extends Message<SymbolDescription, SymbolDescription.Builder> {
  public static final ProtoAdapter<SymbolDescription> ADAPTER = new ProtoAdapter<SymbolDescription>(FieldEncoding.LENGTH_DELIMITED, SymbolDescription.class) {
    @Override
    public int encodedSize(SymbolDescription value) {
      return (value.name != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.name) : 0)
          + (value.description != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.description) : 0)
          + ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.qualities)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, SymbolDescription value) throws IOException {
      if (value.name != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name);
      if (value.description != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.description);
      if (value.qualities != null) ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.qualities);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public SymbolDescription decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.name(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.description(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.qualities.add(ProtoAdapter.STRING.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public SymbolDescription redact(SymbolDescription value) {
      Builder builder = value.newBuilder();
      builder.clearUnknownFields();
      return builder.build();
    }
  };

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_NAME = "";

  public static final String DEFAULT_DESCRIPTION = "";

  public final String name;

  public final String description;

  public final List<String> qualities;

  public SymbolDescription(String name, String description, List<String> qualities) {
    this(name, description, qualities, ByteString.EMPTY);
  }

  public SymbolDescription(String name, String description, List<String> qualities, ByteString unknownFields) {
    super(unknownFields);
    this.name = name;
    this.description = description;
    this.qualities = immutableCopyOf("qualities", qualities);
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.name = name;
    builder.description = description;
    builder.qualities = copyOf("qualities", qualities);
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof SymbolDescription)) return false;
    SymbolDescription o = (SymbolDescription) other;
    return equals(unknownFields(), o.unknownFields())
        && equals(name, o.name)
        && equals(description, o.description)
        && equals(qualities, o.qualities);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (name != null ? name.hashCode() : 0);
      result = result * 37 + (description != null ? description.hashCode() : 0);
      result = result * 37 + (qualities != null ? qualities.hashCode() : 1);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (name != null) builder.append(", name=").append(name);
    if (description != null) builder.append(", description=").append(description);
    if (qualities != null) builder.append(", qualities=").append(qualities);
    return builder.replace(0, 2, "SymbolDescription{").append('}').toString();
  }

  public static final class Builder extends com.squareup.wire.Message.Builder<SymbolDescription, Builder> {
    public String name;

    public String description;

    public List<String> qualities;

    public Builder() {
      qualities = newMutableList();
    }

    public Builder name(String name) {
      this.name = name;
      return this;
    }

    public Builder description(String description) {
      this.description = description;
      return this;
    }

    public Builder qualities(List<String> qualities) {
      checkElementsNotNull(qualities);
      this.qualities = qualities;
      return this;
    }

    @Override
    public SymbolDescription build() {
      return new SymbolDescription(name, description, qualities, buildUnknownFields());
    }
  }
}
