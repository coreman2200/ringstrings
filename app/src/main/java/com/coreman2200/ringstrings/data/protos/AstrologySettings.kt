// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.coreman2200.ringstrings.data.protos.AstrologySettings in ringstrings.proto
package com.coreman2200.ringstrings.`data`.protos

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Double
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Settings necessary for Astrological chart building
 */
public class AstrologySettings(
  /**
   * Max orb used for calculating transits/aspects
   */
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#DOUBLE",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "maxOrb"
  )
  public val max_orb: Double = 0.0,
  /**
   * Default ephemeris directory
   */
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY,
    jsonName = "epheDir"
  )
  public val ephe_dir: String = "",
  unknownFields: ByteString = ByteString.EMPTY
) : AndroidMessage<AstrologySettings, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is AstrologySettings) return false
    if (unknownFields != other.unknownFields) return false
    if (max_orb != other.max_orb) return false
    if (ephe_dir != other.ephe_dir) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + max_orb.hashCode()
      result = result * 37 + ephe_dir.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """max_orb=$max_orb"""
    result += """ephe_dir=${sanitize(ephe_dir)}"""
    return result.joinToString(prefix = "AstrologySettings{", separator = ", ", postfix = "}")
  }

  public fun copy(
    max_orb: Double = this.max_orb,
    ephe_dir: String = this.ephe_dir,
    unknownFields: ByteString = this.unknownFields
  ): AstrologySettings = AstrologySettings(max_orb, ephe_dir, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<AstrologySettings> = object : ProtoAdapter<AstrologySettings>(
      FieldEncoding.LENGTH_DELIMITED, 
      AstrologySettings::class, 
      "type.googleapis.com/com.coreman2200.ringstrings.data.protos.AstrologySettings", 
      PROTO_3, 
      null, 
      "ringstrings.proto"
    ) {
      public override fun encodedSize(`value`: AstrologySettings): Int {
        var size = value.unknownFields.size
        if (value.max_orb != 0.0) size += ProtoAdapter.DOUBLE.encodedSizeWithTag(1, value.max_orb)
        if (value.ephe_dir != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2, value.ephe_dir)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: AstrologySettings): Unit {
        if (value.max_orb != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.max_orb)
        if (value.ephe_dir != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.ephe_dir)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: AstrologySettings): Unit {
        writer.writeBytes(value.unknownFields)
        if (value.ephe_dir != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.ephe_dir)
        if (value.max_orb != 0.0) ProtoAdapter.DOUBLE.encodeWithTag(writer, 1, value.max_orb)
      }

      public override fun decode(reader: ProtoReader): AstrologySettings {
        var max_orb: Double = 0.0
        var ephe_dir: String = ""
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> max_orb = ProtoAdapter.DOUBLE.decode(reader)
            2 -> ephe_dir = ProtoAdapter.STRING.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return AstrologySettings(
          max_orb = max_orb,
          ephe_dir = ephe_dir,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: AstrologySettings): AstrologySettings = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<AstrologySettings> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
