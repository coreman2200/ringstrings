// Code generated by Wire protocol buffer compiler, do not edit.
// Source: com.coreman2200.ringstrings.data.protos.SymbolDescription in ringstrings.proto
package com.coreman2200.ringstrings.`data`.protos

import android.os.Parcelable
import com.squareup.wire.AndroidMessage
import com.squareup.wire.FieldEncoding
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_3
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.immutableCopyOf
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Unit
import kotlin.collections.List
import kotlin.jvm.JvmField
import okio.ByteString

/**
 * Symbol description model for each of the presented symbols in app.
 */
public class SymbolDescription(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val name: String = "",
  @field:WireField(
    tag = 2,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.OMIT_IDENTITY
  )
  public val description: String = "",
  qualities: List<String> = emptyList(),
  unknownFields: ByteString = ByteString.EMPTY
) : AndroidMessage<SymbolDescription, Nothing>(ADAPTER, unknownFields) {
  @field:WireField(
    tag = 3,
    adapter = "com.squareup.wire.ProtoAdapter#STRING",
    label = WireField.Label.REPEATED
  )
  public val qualities: List<String> = immutableCopyOf("qualities", qualities)

  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN
  )
  public override fun newBuilder(): Nothing = throw
      AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  public override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is SymbolDescription) return false
    if (unknownFields != other.unknownFields) return false
    if (name != other.name) return false
    if (description != other.description) return false
    if (qualities != other.qualities) return false
    return true
  }

  public override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + name.hashCode()
      result = result * 37 + description.hashCode()
      result = result * 37 + qualities.hashCode()
      super.hashCode = result
    }
    return result
  }

  public override fun toString(): String {
    val result = mutableListOf<String>()
    result += """name=${sanitize(name)}"""
    result += """description=${sanitize(description)}"""
    if (qualities.isNotEmpty()) result += """qualities=${sanitize(qualities)}"""
    return result.joinToString(prefix = "SymbolDescription{", separator = ", ", postfix = "}")
  }

  public fun copy(
    name: String = this.name,
    description: String = this.description,
    qualities: List<String> = this.qualities,
    unknownFields: ByteString = this.unknownFields
  ): SymbolDescription = SymbolDescription(name, description, qualities, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<SymbolDescription> = object : ProtoAdapter<SymbolDescription>(
      FieldEncoding.LENGTH_DELIMITED, 
      SymbolDescription::class, 
      "type.googleapis.com/com.coreman2200.ringstrings.data.protos.SymbolDescription", 
      PROTO_3, 
      null, 
      "ringstrings.proto"
    ) {
      public override fun encodedSize(`value`: SymbolDescription): Int {
        var size = value.unknownFields.size
        if (value.name != "") size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.name)
        if (value.description != "") size += ProtoAdapter.STRING.encodedSizeWithTag(2,
            value.description)
        size += ProtoAdapter.STRING.asRepeated().encodedSizeWithTag(3, value.qualities)
        return size
      }

      public override fun encode(writer: ProtoWriter, `value`: SymbolDescription): Unit {
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
        if (value.description != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.description)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.qualities)
        writer.writeBytes(value.unknownFields)
      }

      public override fun encode(writer: ReverseProtoWriter, `value`: SymbolDescription): Unit {
        writer.writeBytes(value.unknownFields)
        ProtoAdapter.STRING.asRepeated().encodeWithTag(writer, 3, value.qualities)
        if (value.description != "") ProtoAdapter.STRING.encodeWithTag(writer, 2, value.description)
        if (value.name != "") ProtoAdapter.STRING.encodeWithTag(writer, 1, value.name)
      }

      public override fun decode(reader: ProtoReader): SymbolDescription {
        var name: String = ""
        var description: String = ""
        val qualities = mutableListOf<String>()
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> name = ProtoAdapter.STRING.decode(reader)
            2 -> description = ProtoAdapter.STRING.decode(reader)
            3 -> qualities.add(ProtoAdapter.STRING.decode(reader))
            else -> reader.readUnknownField(tag)
          }
        }
        return SymbolDescription(
          name = name,
          description = description,
          qualities = qualities,
          unknownFields = unknownFields
        )
      }

      public override fun redact(`value`: SymbolDescription): SymbolDescription = value.copy(
        unknownFields = ByteString.EMPTY
      )
    }

    @JvmField
    public val CREATOR: Parcelable.Creator<SymbolDescription> = AndroidMessage.newCreator(ADAPTER)

    private const val serialVersionUID: Long = 0L
  }
}
